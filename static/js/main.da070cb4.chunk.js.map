{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/Searchbox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","Cardlist","robots","cardcomponet","map","user","i","Card","key","Searchbox","searchfield","SearchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchchange","event","setState","target","value","state","_this2","fetch","then","response","json","users","_this3","_this$state","filterrobot","filter","robot","toLowerCase","includes","length","components_Searchbox","components_Scroll","components_Cardlist","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.da070cb4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst card = ({name, email, id}) => {\r\n\treturn(\r\n\t\t\r\n\t\t<div className =\" tc bg-light-green dib br3 pa3 ma3 grow bw2 shadow-5\">\r\n            <img alt = \"robot\"  src = {`https://robohash.org/${id}?200x200`}/>\r\n            <div>\r\n        \t    <h2> {name} </h2>\r\n        \t    <p> {email} </p>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default card;","import React from \"react\";\r\n\r\nimport Card from \"./Card\";\r\n\r\n\r\nconst Cardlist = ({robots}) => {\r\n\r\n\tconst cardcomponet = robots.map ( (user, i )=> {\r\n\t\treturn  <Card \r\n\t\tkey = {i} \r\n\t\tid = {robots[i].id} \r\n\t\tname = {robots[i].name} \r\n\t\temail={robots[i].email} \r\n\t\t/>\r\n\r\n\t}\r\n\r\n\t\t);\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n                {cardcomponet} \r\n            </div> \r\n\t);\r\n\t}\r\n\r\n\r\n\r\nexport default Cardlist;","import React from 'react';\r\n\r\n\r\nconst Searchbox =({searchfield, SearchChange}) => {\r\n\treturn (\r\n         \r\n\t\t<div className =\"pa2\">\r\n            <input className =\"pa3 ba b--green bg-lightest-blue\" \r\n            type=\"search\"  \r\n            placeholder =\"search robot\" \r\n            onChange = {SearchChange} \r\n            />\r\n\r\n\t    </div>\r\n\t);  \r\n};\r\n\r\n\r\n\r\nexport default Searchbox;\r\n\r\n\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn(\r\n        <div style = {{overflowY: 'scroll', border: '5px solid black', height: '800px' }} >\r\n        \t{props.children}\r\n        </div>\r\n\t\t)\r\n}\r\n\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport Cardlist from '../components/Cardlist';\r\nimport Searchbox from '../components/Searchbox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\n\r\n\r\nclass App extends Component {\r\n\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t        searchfield: \"\"\r\n\r\n\t\t} \r\n\t};\r\n\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response=> response.json())\r\n\t\t.then(users=> this.setState({robots:users}))\r\n\t}\r\n\r\n\r\n\tonSearchchange= (event) => {\r\n\r\n\t\tthis.setState({searchfield: event.target.value})\r\n\t\t\r\n\t}\r\n\trender(){\r\n\t\tconst {robots, searchfield} = this.state;\r\n\t\tconst filterrobot = this.state.robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n\t\t});\r\n\r\n\t\tif(this.state.robots.length === 0){\r\n\t\t\treturn <h1> Loading</h1>\r\n\t\t}else {\r\n\r\n\t    return (\r\n\t\t    <div className =\"tc\">\r\n                <h1 className =\"f1\">Robofriends</h1>\r\n                <Searchbox SearchChange = {this.onSearchchange} />\r\n                <Scroll>\r\n                    <Cardlist robots ={filterrobot} />\r\n                </Scroll>\r\n            </div> \r\n\t    );}\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'tachyons';\n// import {robots} from './robots';\n\n\nReactDOM.render( <App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}